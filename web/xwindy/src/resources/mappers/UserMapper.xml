<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper 
	PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"  
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xwindy.web.mapper.UserMapper">

	<select id="getUserById"
			resultType="User">
			SELECT * FROM plate_users
			WHERE id = #{id}
	</select>

	<select id="getStudentById"
			resultType="Student">
			SELECT * FROM plate_users
			WHERE id = #{id} AND user_type = "XS"
	</select>
	
	<select id="getPublicerById"
			resultType="Publicer">
			SELECT * FROM plate_users
			WHERE id = #{id} AND user_type != "XS"
	</select>
	
	<select id="getStudentByUsername"
			resultType="Student">
			SELECT * FROM plate_users
			WHERE username = #{username}
	</select>
	
	<select id="getStudentByStudentId"
			resultType="Student">
			SELECT * FROM plate_users
			WHERE school_number = #{studentId} AND user_type = "XS";
	</select>
	
	<select id="getAllRepairerList"
			resultType="Publicer">
			SELECT * FROM plate_users
			WHERE user_type = "BX"
	</select>
	
	<select id="getUserByUsernameOrStuNumAndPassword"
			resultType="User">
			SELECT * FROM plate_users
			WHERE password = #{password}
			AND (username = #{account} OR school_number = #{account})
	</select>
	
	<select id="searchPublicerListByUsername"
			parameterType="String"
			resultType="Publicer">
			SELECT * FROM plate_users
			WHERE username LIKE '%${1}%' 
			  AND user_type = "GZH"
	</select>
	
	<insert id="addStudent"
			parameterType="Student">
			INSERT INTO plate_users
			(username, password, user_type, school_number, tel_number, email, sport_pass, header, lib_pass, public_class)
			VALUES
			(#{username}, #{password}, "XS", #{schoolNumber}, #{telNumber}, #{email}, #{sportPass}, #{header}, #{libPass}, 0)
	</insert>
	
	<insert id="addPublicer"
			parameterType="Publicer">
			INSERT INTO plate_users
			(public_class, username, password, user_type, tel_number, email, introduce, header)
			VALUES
			(#{publicClass}, #{username}, #{password}, #{userType}, #{telNumber}, #{email}, #{introduce}, #{header})
	</insert>
	
	<update id="updateStudent"
			parameterType="Student">
			UPDATE plate_users
			SET username = #{username}, password = #{password}, school_number = #{schoolNumber},
				tel_number = #{telNumber}, email = #{email}, sport_pass = #{sportPass}, header = #{header}, lib_pass = #{libPass}
			WHERE id = #{id}
	</update>
	
	<update id="updatePublicer"
			parameterType="Publicer">
			UPDATE plate_users
			SET public_class = #{publicClass}, username = #{username}, password = #{password}, user_type = #{userType}, 
				tel_number = #{telNumber}, email = #{email}, introduce = #{introduce}, header = #{header}
			WHERE id = #{id}
	</update>
	
	<delete id="deleteUserById">
			DELETE FROM plate_users WHERE id = #{id}
	</delete>
	
	<select id="getPublicClassById"
			resultType="PublicClass">
			SELECT * FROM public_class
			WHERE id = #{id} and id != 0
	</select>
	
	<select id="getAllPublicClassList"
			resultType="PublicClass">
			SELECT * FROM public_class
			WHERE id != 0
			ORDER BY 'order' ASC
	</select>
	
	<select id="getPublicerListByPublicClassIdAndUserIdAndPage"
			resultType="Publicer">
			SELECT public.id AS id, public.username AS username, public.header, public.introduce, NOT ISNULL(`user`.id) AS isSub
			FROM plate_users AS public
			LEFT OUTER JOIN subscribe ON subscribe.public_id = public.id
			LEFT OUTER JOIN plate_users AS `user` ON `user`.id = subscribe.student_id AND `user`.id = #{userId}
			WHERE public.public_class = #{publicClassId}
			<include refid="pageLimitSql" />
	</select>
	
	<insert id="addSubscribeByPublicIdAndUserId">
			INSERT INTO subscribe (public_id, student_id)
			VALUES (#{publicId}, #{userId})
	</insert>
	
	<delete id="deleteSubscribeByPublicIdAndUserId">
			DELETE FROM subscribe
			WHERE public_id = #{publicId} AND student_id = #{userId}
	</delete>
	
	<sql id="pageLimitSql">
		<if test="pageNo != null">
			LIMIT ${((pageNo-1) * pageSize)}, ${pageSize}
		</if>
	</sql>
</mapper>